results <- metropolis(1000, 0, posterior1)
summary(results)
plot(results)
hist(results)
results <- metropolis(100000, 0, posterior1)
summary(results)
hist(results)
plot(results, type = "l")
hist(results)
source('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
hist(results)
source('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
hist(results)
results <- metropolis(20000, 0, posterior1)
summary(results)
hist(results[10000:20000])
plot(results, type = "l")
sum(results<1)/10000
results < 1
sum(results[10000:20000]<1)/10000
results[10000:20000]
results[10000:20000] < 1
sum(results[10000:20000] < 1)
results[10000:20000] < 1
sum(results[10000:20000] < 1)
summary(results[10000:20000] < 1)
results[is.na(results)]
is.na(results)]
is.na(results)
results[is.na(results)]
any(is.na(results))
summary(results[10000:20000] <= 1)
summary(results[10000:19999] <= 1)
metropolis <- function(length, star, posterior){
values <- c(star,c(1:length-1))
for (i in 2:length+1){
old <- values[i-1]
new <- star + rnorm(1,mean = 0, sd = 3)
acceptan <- acceptance(new, old, posterior)
if (acceptan > runif(1)){
values[i] <- new
}else{
values[i] <- old
}
}
return(values[2:length])
}
results <- metropolis(20000, 0, posterior1)
summary(results)
summary(results)
results[is.na(results)]
any(is.na(results))
length(results)
metropolis <- function(length, star, posterior){
values <- c(star,c(1:length-1))
for (i in 2:length+1){
old <- values[i-1]
new <- star + rnorm(1,mean = 0, sd = 3)
acceptan <- acceptance(new, old, posterior)
if (acceptan > runif(1)){
values[i] <- new
}else{
values[i] <- old
}
}
return(values[2:length+1])
}
results <- metropolis(20000, 0, posterior1)
results
results[20000]
results <- metropolis(2, 0, posterior1)
debugSource('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
debugSource('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
debugSource('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
debugSource('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
debugSource('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
debugSource('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
2:5
debugSource('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
debugSource('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
debugSource('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
results <- metropolis(2000, 0, posterior1)
source('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
results <- metropolis(2000, 0, posterior1)
summary(results)
length(results)
source('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
length(results)
source('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
length(results)
summary(results)
hist(results)
results <- metropolis(200000, 0, posterior1)
summary(results)
length(results)
hist(results)
results <- metropolis(20000, 0, posterior1)
hist(results)
metropolis <- function(leng, star, posterior, sd){
values <- c(star,c(1:leng))
for (i in 2:length(values)){
old <- values[i-1]
new <- star + rnorm(1,mean = 0, sd = sd)
acceptan <- acceptance(new, old, posterior)
if (acceptan > runif(1)){
values[i] <- new
}else{
values[i] <- old
}
}
return(values[2:length(values)])
}
results <- metropolis(20000, 0, posterior1)
results <- metropolis(20000, 0, posterior1, 3)
hist(results)
results <- metropolis(20000, 0, posterior1, 2)
hist(results)
results <- metropolis(20000, 0, posterior1, 1)
hist(results)
results <- metropolis(20000, 0, posterior1, 0.1)
hist(results)
results <- metropolis(200000, 0, posterior1, 0.1)
hist(results)
plot(results)
plotr(results[10000:10500])
plot(results[10000:10500])
hist(results)
source('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R')
results <- metropolis(20000, 0, posterior1, 0.5)
hist(results)
metropolis <- function(leng, star, posterior, sd){
values <- c(star,c(1:leng))
for (i in 2:length(values)){
old <- values[i-1]
#new <- values[i-1] + rnorm(1,mean = 0, sd = sd)
new <- values[i-1] + runif(1,-2,2)
acceptan <- acceptance(new, old, posterior)
if (acceptan > runif(1)){
values[i] <- new
}else{
values[i] <- old
}
}
return(values[2:length(values)])
}
results <- metropolis(20000, 0, posterior1, 0.5)
hist(results)
metropolis <- function(leng, star, posterior, sd){
values <- c(star,c(1:leng))
for (i in 2:length(values)){
old <- values[i-1]
#new <- values[i-1] + rnorm(1,mean = 0, sd = sd)
new <- values[i-1] + runif(1,-sd,sd)
acceptan <- acceptance(new, old, posterior)
if (acceptan > runif(1)){
values[i] <- new
}else{
values[i] <- old
}
}
return(values[2:length(values)])
}
results <- metropolis(20000, 0, posterior1, 0.5)
hist(results)
results <- metropolis(20000, 0, posterior1, 0.05)
hist(results)
results <- metropolis(20000, 0, posterior1, 0.05)
hist(results)
results <- metropolis(20000, 0, posterior1, 4)
hist(results)
metropolis <- function(leng, star, posterior, sd){
values <- c(star,c(1:leng))
for (i in 2:length(values)){
old <- values[i-1]
#using the proposal
#normal prior
new <- values[i-1] + rnorm(1,mean = 0, sd = sd)
#uniform prior
#new <- values[i-1] + runif(1,-sd,sd)
acceptan <- acceptance(new, old, posterior)
if (acceptan > runif(1)){
values[i] <- new
}else{
values[i] <- old
}
}
return(values[2:length(values)])
}
results <- metropolis(20000, 0, posterior1, 0.25)
hist(results)
dnorm(0)
pnorm(0)
qnorm(0)
qnorm(1)
qnorm(0.4)
dnorm(sd = 2)
dnorm(0,sd = 2)
dnorm(0,sd = 0.25)
dnorm(seq(0,1, by = 0.001),sd = 0.25)
mean(dnorm(seq(0,1, by = 0.001),sd = 0.25))
mean(dnorm(0, mean = seq(0,1, by = 0.001),sd = 0.25))
mean(dnorm(0.5, mean = seq(0,1, by = 0.001) ,sd = 0.25))
mean(dnorm(0.6, mean = seq(0,1, by = 0.001) ,sd = 0.25))
mean(dnorm(0.9, mean = seq(0,1, by = 0.001) ,sd = 0.25))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.25))
mean(dnorm(2, mean = seq(0,1, by = 0.001) ,sd = 0.25))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.25))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.25))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.5/1.96))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.3))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.28))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.29))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.285))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.289))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.289))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.29))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.295))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.3))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.32))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.26))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.27))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.28))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.284))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.283))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.282))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.283))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.284))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.2833))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.2832))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.2831))
0.5/0.2831
pnorm(0.5, sd = 0.25)
pnorm(-0.5, sd = 0.25)
pnorm(-0.5, sd = 0.25)*2
pnorm(-0.5, sd = 0.2831)*2
pnorm(-0.5, sd = 0.26)*2
pnorm(-0.5, sd = 0.254)*2
pnorm(-0.5, sd = 0.255)*2
pnorm(-0.5, sd = 0.256)*2
pnorm(-0.5, sd = 0.255)*2
mean(dnorm(0, mean = seq(0,1, by = 0.001) ,sd = 0.25))
mean(dnorm(0, mean = seq(-10,10, by = 0.001) ,sd = 0.25))
mean(dnorm(0, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
mean(dnorm(0, mean = seq(-100,0, by = 0.001) ,sd = 0.25))
sum(dnorm(0, mean = seq(-100,0, by = 0.001) ,sd = 0.25))
sum(dnorm(0, mean = seq(-1000,0, by = 0.001) ,sd = 0.25))
sum(dnorm(0, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
sum(dnorm(0, mean = seq(-1,0, by = 0.001) ,sd = 0.25))
sum(dnorm(0, mean = seq(-0.2,0, by = 0.001) ,sd = 0.25))
sum(dnorm(0, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
sum(dnorm(2, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
sum(dnorm(1, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
sum(dnorm(1, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
sum(dnorm(0, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
plot(z,sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25)))
z <- seq(0,1, by = 0.001)
plot(z,sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25)))
plot(z,sapply(z, p_steck_unten))
p_steck_unten <- function(z){
sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
}
plot(z,sapply(z, p_steck_unten))
plot(z,sapply(z, p_steck_unten), type = "l")
p_steck_oben <- function(z){
sum(dnorm(z, mean = seq(1,11, by = 0.001) ,sd = 0.25))
}
plot(z,sapply(z, p_steck_oben), type = "l")
plot(z,sapply(z, p_steck_unten)/p_steck_oben(0), type = "l")
plot(z,sapply(z, p_steck_unten)/(2*p_steck_unten(0)), type = "l")
p_steck_unten <- function(z){
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25)))
}
#die Wahrscheinlichkeit auf Untenstecken für 0 (ist ja ungefähr
# 0.5 da über 4 sd sehr unwahrscheinlich) normalisieren
return(steck_unten_approx(z)/ steck_unten_approx(0))
}
p_steck_unten(0)
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25)))
}
p_steck_unten <- function(z){
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25)))
}
#die Wahrscheinlichkeit auf Untenstecken für 0 (ist ja ungefähr
# 0.5 da über 4 sd sehr unwahrscheinlich) normalisieren
return(steck_unten_approx(z)/ (steck_unten_approx(0)*2))
}
p_steck_unten(0)
p_steck_unten(1)
p_steck_unten(0.3)
p_steck_unten(0.2)
p_steck_unten(0.1)
p_steck_unten <- function(z){
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.0001) ,sd = 0.25)))
}
#die Wahrscheinlichkeit auf Untenstecken für 0 (ist ja ungefähr
# 0.5 da über 4 sd sehr unwahrscheinlich) normalisieren
return(steck_unten_approx(z)/ (steck_unten_approx(0)*2))
}
p_steck_unten(0.1)
p_steck_unten <- function(z){
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.0001) ,sd = 0.1)))
}
#die Wahrscheinlichkeit auf Untenstecken für 0 (ist ja ungefähr
# 0.5 da über 4 sd sehr unwahrscheinlich) normalisieren
return(steck_unten_approx(z)/ (steck_unten_approx(0)*2))
}
p_steck_unten(0.1)
p_steck_unten <- function(z){
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.1)))
}
#die Wahrscheinlichkeit auf Untenstecken für 0 (ist ja ungefähr
# 0.5 da über 4 sd sehr unwahrscheinlich) normalisieren
return(steck_unten_approx(z)/ (steck_unten_approx(0)*2))
}
p_steck_unten(0.1)
p_steck_oben <- function(z){
steck_oben_approx <- function(z){
return(sum(dnorm(z, mean = seq(1,11, by = 0.001) ,sd = 0.25)))
}
return(steck_oben_approx(z)/ (steck_oben_approx(1)*2))
}
#normalisieren auf 0.5
plot(z,sapply(z, p_steck_unten)/(2*p_steck_unten(0)), type = "l")
plot(z,sapply(z, p_steck_oben), type = "l")
#normalisieren auf 0.5
plot(z,sapply(z, p_steck_unten), type = "l")
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.25))
mean(dnorm(1, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
mean(dnorm(1, mean = seq(0,1, by = 0.00001) ,sd = 0.25))
mean(dnorm(0.5, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
mean(dnorm(1, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
mean(dnorm(0, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
mean(dnorm(0, mean = seq(0,1, by = 0.000001) ,sd = 0.25))
mean(dnorm(0, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
mean(dnorm(0, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
mean(dnorm(0.5, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
pnorm(0.5)
pnorm(mean = 0.5, sd = 0.25)
pnorm(0, mean = 0.5, sd = 0.025)
pnorm(0, mean = 0.5, sd = 0.25)
1 - 2 * pnorm(0, mean = 0.5, sd = 0.25)
mean(dnorm(0.5, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
mean(dnorm(0, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
pnorm(0, mean = 4, sd = 4)
pnorm(0, mean = 4, sd = 1)
pnorm(0, mean = 4, sd = 1) + pnorm(4, mean = 4, sd = 1)
plot(z,mean(dnorm(z, mean = seq(0,1, by = 0.0001) ,sd = 0.25)))
plot(z,mean(dnorm(z, mean = seq(0,1, by = 0.0001) ,sd = 0.25)))
#logisches Ergebnis, da ist quasi die Frage, was ist die durchschnitt
#liche dichte der einzelnen Verteilungsfunktionen. Da wir auf 0,1 arbeiten
# mit einer geringen sd. Ist für den mittelsten Wert die durcschnittliche Dichte
# ungefähr 0.95, da symetrische Wahrscheinlichkeit und das dann die FLäche
p_getroffen <- function(z){
return(mean(dnorm(z, mean = seq(0,1, by = 0.0001) ,sd = 0.25)))
}
p_getroffen(0)
p_getroffen(2)
p_getroffen(1)
plot(z,sapply(z, p_getroffen), type = "l")
plot(z,sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten) , type = "l")
#normalisieren auf 0.5
plot(z,sapply(z, p_steck_unten), type = "l")
plot(z,sapply(z, p_steck_oben), type = "l")
plot(z,sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten) , type = "l")
z <- seq(0,1, by = 0.01)
plot(z,sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten) , type = "l")
p_steck_unten(0.4)
p_steck_oben(0.6)
p_steck_unten(0.1)
p_steck_oben(0.9)
p_steck_unten <- function(z){
return(p_steck_oben(1 - z))
}
p_steck_unten(0.1)
p_steck_oben(0.9)
#normalisieren auf 0.5
plot(z,sapply(z, p_steck_unten), type = "l")
plot(z,sapply(z, p_steck_oben), type = "l")
#logisches Ergebnis, da ist quasi die Frage, was ist die durchschnitt
#liche dichte der einzelnen Verteilungsfunktionen. Da wir auf 0,1 arbeiten
# mit einer geringen sd. Ist für den mittelsten Wert die durcschnittliche Dichte
# ungefähr 0.95, da symetrische Wahrscheinlichkeit und das dann die FLäche
p_getroffen <- function(z){
return(mean(dnorm(z, mean = seq(0,1, by = 0.0001) ,sd = 0.25)))
}
plot(z,sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten) , type = "l")
p_steck_unten <- function(z){
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25)))
}
return(steck_unten_approx(z)/ (steck_unten_approx(0)*2))
}
p_steck_oben <- function(z){
return(p_steck_unten(1 - z))
}
p_steck_unten(0.1)
p_steck_oben(0.9)
#normalisieren auf 0.5
plot(z,sapply(z, p_steck_unten), type = "l")
plot(z,sapply(z, p_steck_oben), type = "l")
#logisches Ergebnis, da ist quasi die Frage, was ist die durchschnitt
#liche dichte der einzelnen Verteilungsfunktionen. Da wir auf 0,1 arbeiten
# mit einer geringen sd. Ist für den mittelsten Wert die durcschnittliche Dichte
# ungefähr 0.95, da symetrische Wahrscheinlichkeit und das dann die FLäche
p_getroffen <- function(z){
return(mean(dnorm(z, mean = seq(0,1, by = 0.0001) ,sd = 0.25)))
}
plot(z,sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten) , type = "l")
a <-  p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten)
a <-  sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten)
a
source('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R', encoding = 'UTF-8')
a
# #die Wahrscheinlichkeit auf Untenstecken für 0 (ist ja ungefähr
# # 0.5 da über 4 sd sehr unwahrscheinlich) normalisieren
p_steck_oben <- function(z){
steck_oben_approx <- function(z){
return(sum(dnorm(z, mean = seq(1,11, by = 0.001) ,sd = 0.25)))
}
return(steck_oben_approx(z)/ (steck_oben_approx(1)*2))
}
a <-  sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten)
a
plot(z,sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten) , type = "l")
p_steck_unten(0.1)
p_steck_oben(0.9)
p_steck_unten <- function(z){
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25)))
}
return(steck_unten_approx(z)/ (steck_unten_approx(0)*2))
}
# #die Wahrscheinlichkeit auf Untenstecken für 0 (ist ja ungefähr
# # 0.5 da über 4 sd sehr unwahrscheinlich) normalisieren
p_steck_oben <- function(z){
steck_oben_approx <- function(z){
return(sum(dnorm(z, mean = seq(1,11, by = 0.001) ,sd = 0.25)))
}
return(steck_oben_approx(z)/ (steck_oben_approx(1)*2))
}
p_steck_unten(0.1)
p_steck_oben(0.9)
#normalisieren auf 0.5
plot(z,sapply(z, p_steck_unten), type = "l")
plot(z,sapply(z, p_steck_oben), type = "l")
#logisches Ergebnis, da ist quasi die Frage, was ist die durchschnitt
#liche dichte der einzelnen Verteilungsfunktionen. Da wir auf 0,1 arbeiten
# mit einer geringen sd. Ist für den mittelsten Wert die durcschnittliche Dichte
# ungefähr 0.95, da symetrische Wahrscheinlichkeit und das dann die FLäche
p_getroffen <- function(z){
return(mean(dnorm(z, mean = seq(0,1, by = 0.0001) ,sd = 0.25)))
}
plot(z,sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten) , type = "l")
a <-  sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten)
a
.libpaths()
install.packages("repr")
# cor(data_wide_model2[,7:18], use = "pairwise.complete.obs") %>%  round(3)
# cov(data[,1:12], use = "pairwise.complete.obs") %>%  round(1)
pchisq(52979-49017,3147-155)
# cor(data_wide_model2[,7:18], use = "pairwise.complete.obs") %>%  round(3)
# cov(data[,1:12], use = "pairwise.complete.obs") %>%  round(1)
pchisq(52979-41017,3147-155)
# cor(data_wide_model2[,7:18], use = "pairwise.complete.obs") %>%  round(3)
# cov(data[,1:12], use = "pairwise.complete.obs") %>%  round(1)
pchisq(52979-51017,3147-155)
# cor(data_wide_model2[,7:18], use = "pairwise.complete.obs") %>%  round(3)
# cov(data[,1:12], use = "pairwise.complete.obs") %>%  round(1)
pchisq(52979-49017,3147-155)
# cor(data_wide_model2[,7:18], use = "pairwise.complete.obs") %>%  round(3)
# cov(data[,1:12], use = "pairwise.complete.obs") %>%  round(1)
pchisq(52979-51017,3147-155)
# cor(data_wide_model2[,7:18], use = "pairwise.complete.obs") %>%  round(3)
# cov(data[,1:12], use = "pairwise.complete.obs") %>%  round(1)
pchisq(52979-49017,52979-49017)
52979-49017
data_long$year0.5 <- ifelse(data_long$years_after == 0.5, 1,0)
library(lme4)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
Grub <- read.csv("..\\data\\Grubs_Nematodes.csv")
View(Grub)
library(survival)
lognormal_results <- survreg(Surv(LOWERLIM,UPPERLIM) ~ GRUBSIZE +  GROUP,
Grub, dist = "lognormal")
summary(lognormal_results)
lognormal_results
Surv(Grub$LOWERLIM,Grub$UPPERLIM)
Surv(Grub$LOWERLIM,Grub$UPPERLIM, type = c("right "))
Surv(Grub$LOWERLIM,Grub$UPPERLIM, type = c("right"))
Surv(Grub$LOWERLIM,Grub$UPPERLIM, type = c("intervall"))
Surv(Grub$LOWERLIM,Grub$UPPERLIM, type = c("interval"))
Grub$LOWERLIM
Grub$EVENT <- ifelse(is.na(Grub$UPPERLIM),0,3)
Surv(Grub$LOWERLIM,Grub$UPPerlim, event = event)
Surv(Grub$LOWERLIM,Grub$UPPERLIM, event = event)
Surv(Grub$LOWERLIM,Grub$UPPERLIM, event = Grubs$EVENT)
Surv(Grub$LOWERLIM,Grub$UPPERLIM, event = Grub$EVENT)
lognormal_results <- survreg(Surv(time = LOWERLIM,time2 = UPPERLIM, event = EVENT) ~ GRUBSIZE +  GROUP,
Grub, dist = "lognormal")
Surv(Grub$LOWERLIM, event = Grub$EVENT)
lognormal_results <- survreg(Surv(time = LOWERLIM, event = EVENT) ~ GRUBSIZE +  GROUP,
Grub, dist = "lognormal")
lognormal_results <- survreg(Surv(time = LOWERLIM, event = EVENT) ~ GRUBSIZE +  GROUP,
Grub, dist = "lognormal")
lognormal_results <- survreg(Surv(time = LOWERLIM, event = EVENT) ~ GRUBSIZE +  GROUP,
Grub, dist = "lognormal")
