#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
print(ModelLogN)
sort(Grub$upperlim)
Grub <- read.csv("..\\data\\Grubs_Easy_normalized_size.csv")
sort(Grub$upperlim)
sort(Grub$upperlim,na.last = T)
length(Grub$upperlim)
length(NAs)
length(sort(Grub$upperlim))
library(dplyr)
Grub <- read.csv("..\\data\\Grubs_Easy_normalized_size.csv")
Grub %>% arrange(upperlim)
Grub <- Grub %>% arrange(upperlim)
View(Grub)
length(sort(Grub$upperlim))
#10
lenngth_Upper <- nrow(Grub) - length_NA_Upper
length_NA_Upper <- length(sort(Grub$upperlim))
#10
lenngth_Upper <- nrow(Grub) - length_NA_Upper
lenngth_Upper
length_NA_Upper <- length(sort(Grub$upperlim))
length_Upper <- length(sort(Grub$upperlim))
#10
lenngth_NA_Upper <- nrow(Grub) - length_NA_Upper
lenngth_NA_Upper
length_Upper
lenngth_NA_Upper
#Grub$upperlim[NAs]<- 100000
#da alle Intervallcensored sind gerade muss ich immer eine 1 schicken
#https://stats.stackexchange.com/questions/13847/how-does-dinterval-for-interval-censored-data-work-in-jags
Grub$state <- c(rep(1,length_Upper),rep(1,lenngth_NA_Upper ))
Grub$value <- as.numeric(NA)
model.data <- list(y = Grub$value, z = Grub$state, N1 = length_Upper,N2 = lenngth_NA_Upper, x1 = Grub$grubsize,
x2 = Grub$group, lims = cbind(Grub$lowerlim,Grub$upperlim))
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ))
parameters <-c("beta0", "beta1", "beta2", "sigma")
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i,1 ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i,1 ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
print(ModelLogN)
#Grub$upperlim[NAs]<- 100000
#da alle Intervallcensored sind gerade muss ich immer eine 1 schicken
#https://stats.stackexchange.com/questions/13847/how-does-dinterval-for-interval-censored-data-work-in-jags
Grub$state <- c(rep(1,length_Upper),rep(2,lenngth_NA_Upper ))
Grub$value <- as.numeric(NA)
model.data <- list(y = Grub$value, z = Grub$state, N1 = length_Upper,N2 = lenngth_NA_Upper, x1 = Grub$grubsize,
x2 = Grub$group, lims = cbind(Grub$lowerlim,Grub$upperlim))
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ))
parameters <-c("beta0", "beta1", "beta2", "sigma")
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i,1 ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i,1 ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
Grub <- read.csv("..\\data\\Grubs_Easy_normalized_size.csv")
Grub <- Grub %>% arrange(upperlim)
length_Upper <- length(sort(Grub$upperlim))
#10
lenngth_NA_Upper <- nrow(Grub) - length_NA_Upper
NAs <- is.na(Grub$upperlim)
NAs
Grub[NAs] <- 14
Grub$upperlim[NAs] <- 14
#Grub$upperlim[NAs]<- 100000
#da alle Intervallcensored sind gerade muss ich immer eine 1 schicken
#https://stats.stackexchange.com/questions/13847/how-does-dinterval-for-interval-censored-data-work-in-jags
Grub$state <- c(rep(1,length_Upper),rep(1,lenngth_NA_Upper ))
Grub$value <- as.numeric(NA)
model.data <- list(y = Grub$value, z = Grub$state, N1 = length_Upper,N2 = lenngth_NA_Upper, x1 = Grub$grubsize,
x2 = Grub$group, lims = cbind(Grub$lowerlim,Grub$upperlim))
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ))
parameters <-c("beta0", "beta1", "beta2", "sigma")
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i, ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i, ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
print(ModelLogN)
#da alle Intervallcensored sind gerade muss ich immer eine 1 schicken
#https://stats.stackexchange.com/questions/13847/how-does-dinterval-for-interval-censored-data-work-in-jags
Grub$state <- c(rep(1,length_Upper),rep(2,lenngth_NA_Upper ))
Grub$value <- as.numeric(NA)
model.data <- list(y = Grub$value, z = Grub$state, N1 = length_Upper,N2 = lenngth_NA_Upper, x1 = Grub$grubsize,
x2 = Grub$group, lims = cbind(Grub$lowerlim,Grub$upperlim))
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ))
parameters <-c("beta0", "beta1", "beta2", "sigma")
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i, ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i, 1])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i, ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i, 2])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
Grub$state
#da alle Intervallcensored sind gerade muss ich immer eine 1 schicken
#https://stats.stackexchange.com/questions/13847/how-does-dinterval-for-interval-censored-data-work-in-jags
Grub$state <- c(rep(1,length_Upper),rep(2,lenngth_NA_Upper ))
Grub$value <- as.numeric(NA)
model.data <- list(y = Grub$value, z = Grub$state, N1 = length_Upper,N2 = lenngth_NA_Upper, x1 = Grub$grubsize,
x2 = Grub$group, lims = cbind(Grub$lowerlim,Grub$upperlim))
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ))
parameters <-c("beta0", "beta1", "beta2", "sigma")
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i, ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i,2])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
#da alle Intervallcensored sind gerade muss ich immer eine 1 schicken
#https://stats.stackexchange.com/questions/13847/how-does-dinterval-for-interval-censored-data-work-in-jags
Grub$state <- c(rep(1,length_Upper),rep(1,lenngth_NA_Upper ))
Grub$value <- as.numeric(NA)
model.data <- list(y = Grub$value, z = Grub$state, N1 = length_Upper,N2 = lenngth_NA_Upper, x1 = Grub$grubsize,
x2 = Grub$group, lims = cbind(Grub$lowerlim,Grub$upperlim))
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ))
parameters <-c("beta0", "beta1", "beta2", "sigma")
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i, ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i,2])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
print(ModelLogN)
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
Grub$upperlim[NAs] <- 12
#da alle Intervallcensored sind gerade muss ich immer eine 1 schicken
#https://stats.stackexchange.com/questions/13847/how-does-dinterval-for-interval-censored-data-work-in-jags
Grub$state <- c(rep(1,length_Upper),rep(2,lenngth_NA_Upper ))
#also helpfull: https://stats.stackexchange.com/questions/70858/right-censored-survival-fit-with-jags
Grub$value <- as.numeric(NA)
model.data <- list(y = Grub$value, z = Grub$state, N1 = length_Upper,N2 = lenngth_NA_Upper, x1 = Grub$grubsize,
x2 = Grub$group, lims = cbind(Grub$lowerlim,Grub$upperlim))
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ))
parameters <-c("beta0", "beta1", "beta2", "sigma")
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i, ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i,2])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
any(is.na(Grub$upperlim))
Grub$upperlim[NAs] <- 13
#da alle Intervallcensored sind gerade muss ich immer eine 1 schicken
#https://stats.stackexchange.com/questions/13847/how-does-dinterval-for-interval-censored-data-work-in-jags
Grub$state <- c(rep(1,length_Upper),rep(2,lenngth_NA_Upper))
#also helpfull: https://stats.stackexchange.com/questions/70858/right-censored-survival-fit-with-jags
Grub$value <- as.numeric(NA)
#da alle Intervallcensored sind gerade muss ich immer eine 1 schicken
#https://stats.stackexchange.com/questions/13847/how-does-dinterval-for-interval-censored-data-work-in-jags
Grub$state <- c(rep(1,length_Upper),rep(2,lenngth_NA_Upper))
#also helpfull: https://stats.stackexchange.com/questions/70858/right-censored-survival-fit-with-jags
Grub$value <- as.numeric(NA)
model.data <- list(y = Grub$value, z = Grub$state, N1 = length_Upper,N2 = lenngth_NA_Upper, x1 = Grub$grubsize,
x2 = Grub$group, lims = cbind(Grub$lowerlim,Grub$upperlim))
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ))
parameters <-c("beta0", "beta1", "beta2", "sigma")
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i, ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i,])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
print(ModelLogN)
Grub$upperlim[NAs] <- 12
#da alle Intervallcensored sind gerade muss ich immer eine 1 schicken
#https://stats.stackexchange.com/questions/13847/how-does-dinterval-for-interval-censored-data-work-in-jags
Grub$state <- c(rep(1,length_Upper),rep(2,lenngth_NA_Upper))
#also helpfull: https://stats.stackexchange.com/questions/70858/right-censored-survival-fit-with-jags
Grub$value <- as.numeric(NA)
model.data <- list(y = Grub$value, z = Grub$state, N1 = length_Upper,N2 = lenngth_NA_Upper, x1 = Grub$grubsize,
x2 = Grub$group, lims = cbind(Grub$lowerlim,Grub$upperlim))
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ))
parameters <-c("beta0", "beta1", "beta2", "sigma")
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i, ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i,])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
Grub$upperlim[NAs] <- 12.00001
#da alle Intervallcensored sind gerade muss ich immer eine 1 schicken
#https://stats.stackexchange.com/questions/13847/how-does-dinterval-for-interval-censored-data-work-in-jags
Grub$state <- c(rep(1,length_Upper),rep(2,lenngth_NA_Upper))
#also helpfull: https://stats.stackexchange.com/questions/70858/right-censored-survival-fit-with-jags
Grub$value <- as.numeric(NA)
model.data <- list(y = Grub$value, z = Grub$state, N1 = length_Upper,N2 = lenngth_NA_Upper, x1 = Grub$grubsize,
x2 = Grub$group, lims = cbind(Grub$lowerlim,Grub$upperlim))
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ))
parameters <-c("beta0", "beta1", "beta2", "sigma")
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i, ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i,])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
print(ModelLogN)
Grub$upperlim[NAs] <- 12.000000000001
#da alle Intervallcensored sind gerade muss ich immer eine 1 schicken
#https://stats.stackexchange.com/questions/13847/how-does-dinterval-for-interval-censored-data-work-in-jags
Grub$state <- c(rep(1,length_Upper),rep(2,lenngth_NA_Upper))
#also helpfull: https://stats.stackexchange.com/questions/70858/right-censored-survival-fit-with-jags
Grub$value <- as.numeric(NA)
model.data <- list(y = Grub$value, z = Grub$state, N1 = length_Upper,N2 = lenngth_NA_Upper, x1 = Grub$grubsize,
x2 = Grub$group, lims = cbind(Grub$lowerlim,Grub$upperlim))
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ))
parameters <-c("beta0", "beta1", "beta2", "sigma")
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i, ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i,])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
print(ModelLogN)
Grub$upperlim[NAs] <- 12.000000000000000000001
#da alle Intervallcensored sind gerade muss ich immer eine 1 schicken
#https://stats.stackexchange.com/questions/13847/how-does-dinterval-for-interval-censored-data-work-in-jags
Grub$state <- c(rep(1,length_Upper),rep(2,lenngth_NA_Upper))
#also helpfull: https://stats.stackexchange.com/questions/70858/right-censored-survival-fit-with-jags
Grub$value <- as.numeric(NA)
model.data <- list(y = Grub$value, z = Grub$state, N1 = length_Upper,N2 = lenngth_NA_Upper, x1 = Grub$grubsize,
x2 = Grub$group, lims = cbind(Grub$lowerlim,Grub$upperlim))
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ))
parameters <-c("beta0", "beta1", "beta2", "sigma")
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i, ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i,])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
Grub$upperlim[NAs] <- 12.000001
#da alle Intervallcensored sind gerade muss ich immer eine 1 schicken
#https://stats.stackexchange.com/questions/13847/how-does-dinterval-for-interval-censored-data-work-in-jags
Grub$state <- c(rep(1,length_Upper),rep(2,lenngth_NA_Upper))
#also helpfull: https://stats.stackexchange.com/questions/70858/right-censored-survival-fit-with-jags
Grub$value <- as.numeric(NA)
model.data <- list(y = Grub$value, z = Grub$state, N1 = length_Upper,N2 = lenngth_NA_Upper, x1 = Grub$grubsize,
x2 = Grub$group, lims = cbind(Grub$lowerlim,Grub$upperlim))
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ))
parameters <-c("beta0", "beta1", "beta2", "sigma")
model.function <- "model{
for (i in 1:N1){
z[i] ~ dinterval(y[i], lims[i, ])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
for (i in (N1+1):(N1+N2)){
z[i] ~ dinterval(y[i], lims[i,])
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dunif(0.1,1000)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 5000, sample = 10000, thin = 1, n.chains = 2
, progress.bar = "text")
print(ModelLogN)
