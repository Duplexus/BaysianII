mcmc_rep <- as.mcmc.list(Model_test)
subset_pred <- grepl("Devi", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset <- get_values(mcmc_rep,subset_pred)
subset_pred <- grepl("D2evi", dimnames(mcmc_rep[[1]])[[2]])
#Testfile BIC
source("helpfunctions.r")
source('C:/Valentin/Goettingen/3_Semester/Baysian_2/Baysian_GitHUb/R_Code/helpfunctions.R')
subset_pred <- grepl("Devi", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset <- get_values(mcmc_rep,subset_pred)
subset_pred <- grepl("D2evi", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset <- get_values(mcmc_rep,subset_pred)
mcmc_subset
mcmc_subset2 <- get_values(mcmc_rep,subset_pred)
mean(mcmc_subset2)
mcmc_subset <- get_values(mcmc_rep,subset_pred)
subset_pred <- grepl("D2evi", dimnames(mcmc_rep[[1]])[[2]])
subset_pred <- grepl("Devi", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset <- get_values(mcmc_rep,subset_pred)
mean(mcmc_subset)
model.function <- "model{
for (i in 1:N){
y[i] ~ dnorm(mu[i], tau)
mu[i] <- beta0 + beta1 *x1[i]
D[i] <- - log(tau) + log(2*3.14159265358979) + pow(y[i]-mu[i],2)*tau
D2[i] <- log(dnorm(y[i],mu[i],tau))
}
#priors
Devi <- sum(D[])
D2evi <- sum(D2[])
tau <- 1/sigma
sigma ~ dgamma(0.001, 0.001)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
#Set Up Model
#Generate MCMC SAMpls
Model_test <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 2000,
sample = 5000, thin = 1, n.chains = 2)
plot(Model_test)
mcmc_rep <- as.mcmc.list(Model_test)
subset_pred <- grepl("Devi", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset <- get_values(mcmc_rep,subset_pred)
mean(mcmc_subset)
subset_pred <- grepl("D2evi", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset2 <- get_values(mcmc_rep,subset_pred)
mean(mcmc_subset2)
-2 *mean(mcmc_subset2)
#Model Diagnostics and so on
#Starts with ModelLogN and plots it and calculates BIC and the
#Statistics of Rubin and so on
#some Results
plot(ModelLogN)
#DEFINE INTITIAL VALUES
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),
list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 )
)
#Monitored Variables
parameters <-c("beta0", "beta1", "beta2", "sigma")
#Initial Values
model.data <- list( y = Grub$value, N = length(Grub$value), x1 = Grub$grubsize,
x2 = Grub$group )
# Specification data model
model.function <- "model{
for (i in 1:N){
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dgamma(0.001, 0.001)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
#Set Up Model
#Generate MCMC SAMpls
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 2000,
sample = 5000, thin = 1, n.chains = 2)
Grub <- read.csv("..\\data\\Grubs_Easy_normalized_size.csv")
#DEFINE INTITIAL VALUES
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),
list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 )
)
#Monitored Variables
parameters <-c("beta0", "beta1", "beta2", "sigma")
#Initial Values
model.data <- list( y = Grub$value, N = length(Grub$value), x1 = Grub$grubsize,
x2 = Grub$group )
# Specification data model
model.function <- "model{
for (i in 1:N){
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dgamma(0.001, 0.001)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
#Set Up Model
#Generate MCMC SAMpls
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 2000,
sample = 5000, thin = 1, n.chains = 2)
#Initial Values
model.data <- list( y = Grub$value, N = length(Grub$value), x1 = Grub$grubsize,
x2 = Grub$group)
source("helpfunctions.r")
library("runjags")
library("coda")
library("rjags")
Grub <- read.csv("..\\data\\Grubs_Easy_normalized_size.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("helpfunctions.r")
library("runjags")
library("coda")
library("rjags")
Grub <- read.csv("..\\data\\Grubs_Easy_normalized_size.csv")
#DEFINE INTITIAL VALUES
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 ),
list(sigma=2, beta0=1, beta1 = 1,beta2 = 1 )
)
#Monitored Variables
parameters <-c("beta0", "beta1", "beta2", "sigma")
#Initial Values
model.data <- list( y = Grub$value, N = length(Grub$value), x1 = Grub$grubsize,
x2 = Grub$group)
# Specification data model
model.function <- "model{
for (i in 1:N){
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
}
#priors
sigma ~ dgamma(0.001, 0.001)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
#Set Up Model
#Generate MCMC SAMpls
ModelLogN <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 2000,
sample = 5000, thin = 1, n.chains = 2)
#Model Diagnostics and so on
#Starts with ModelLogN and plots it and calculates BIC and the
#Statistics of Rubin and so on
#some Results
plot(ModelLogN)
print(ModelLogN)
#Model Diagnostics and so on
#Starts with ModelLogN and plots it and calculates BIC and the
#Statistics of Rubin and so on
#some Results
plot(ModelLogN)
print(ModelLogN)
extract.runjags(ModelLogN, "stochastic")
#PPC for normality of Errors
####Model Disagnostics and PPC
model.function <- "model{
for (i in 1:N){
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
ppo[i] <- dnorm(k[i],mu[i],sigma)
k[i] <- log(y[i])
}
#priors
sigma ~ dgamma(0.001, 0.001)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
#ppc look on residuals
for (i in 1:N){
res[i] <- k[i] - mu[i]
D[i] <- dlnorm(y[i],mu[i], sigma)
}
Deviance <- sum(D[])
}"
parameters <-c("beta0", "beta1", "beta2", "sigma","ppo","res","mu","Deviance")
ModelLogN_rep <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 2000,
sample = 5000, thin = 1, n.chains = 2)
mcmc_rep <- as.mcmc.list(ModelLogN_rep)
subset_pred <- grepl("Deviance", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset <- get_values(mcmc_rep,subset_pred)
mcmc_subset
-2*mean(mcmc_subset)
dic_val <- extract.runjags(ModelLogN_rep, "dic")
dic_val
-2*mean(mcmc_subset)
#3.) Get the DIC running
subset_pred <- grepl("D\\[", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset <- get_values(mcmc_rep,subset_pred)
#3.) Get the DIC running
subset_pred <- grepl("D\\[", dimnames(mcmc_rep[[1]])[[2]])
subset_pred
#PPC for normality of Errors
####Model Disagnostics and PPC
model.function <- "model{
for (i in 1:N){
y[i] ~ dnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
ppo[i] <- dnorm(k[i],mu[i],sigma)
k[i] <- log(y[i])
}
#priors
sigma ~ dgamma(0.001, 0.001)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
#ppc look on residuals
for (i in 1:N){
res[i] <- k[i] - mu[i]
D[i] <- dnorm(y[i],mu[i], sigma)
}
Deviance <- sum(D[])
}"
parameters <-c("beta0", "beta1", "beta2", "sigma","ppo","res","mu","Deviance")
ModelLogN_rep <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 2000,
sample = 5000, thin = 1, n.chains = 2)
mcmc_rep <- as.mcmc.list(ModelLogN_rep)
#1.) extract the ppo values
subset_pred <- grepl("ppo\\[", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset <- get_values(mcmc_rep,subset_pred)
#ppo which are now far of?
plot(1/apply(as.matrix(mcmc_subset),2,mean))
#2.) extract the res values
subset_pred <- grepl("res\\[", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset <- get_values(mcmc_rep,subset_pred)
#how look the average residuals in the log world?
hist(apply(mcmc_subset,2,mean), breaks = 20)
#3.) Get the DIC running
subset_pred <- grepl("D\\[", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset <- get_values(mcmc_rep,subset_pred)
erstes <- cbind(apply(mcmc_subset,2,mean))
subset_pred <- grepl("Deviance", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset <- get_values(mcmc_rep,subset_pred)
-2*mean(mcmc_subset)
dic_val <- extract.runjags(ModelLogN_rep, "dic")
dic_val
#PPC for normality of Errors
####Model Disagnostics and PPC
model.function <- "model{
for (i in 1:N){
y[i] ~ dnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
ppo[i] <- dnorm(k[i],mu[i],sigma)
k[i] <- log(y[i])
}
#priors
sigma ~ dgamma(0.001, 0.001)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
#ppc look on residuals
for (i in 1:N){
res[i] <- k[i] - mu[i]
D[i] <- log(dnorm(y[i],mu[i], sigma))
}
Deviance <- sum(D[])
}"
parameters <-c("beta0", "beta1", "beta2", "sigma","ppo","res","mu","Deviance")
ModelLogN_rep <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 2000,
sample = 5000, thin = 1, n.chains = 2)
mcmc_rep <- as.mcmc.list(ModelLogN_rep)
subset_pred <- grepl("Deviance", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset <- get_values(mcmc_rep,subset_pred)
-2*mean(mcmc_subset)
dic_val <- extract.runjags(ModelLogN_rep, "dic")
dic_val
#PPC for normality of Errors
####Model Disagnostics and PPC
model.function <- "model{
for (i in 1:N){
y[i] ~ dlnorm(mu[i], sigma)
mu[i] <- beta0 + beta1 *x1[i] + beta2 *x2[i]
ppo[i] <- dnorm(k[i],mu[i],sigma)
k[i] <- log(y[i])
}
#priors
sigma ~ dgamma(0.001, 0.001)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
beta2 ~ dnorm(0,0.001)
#ppc look on residuals
for (i in 1:N){
res[i] <- k[i] - mu[i]
D[i] <- log(dlnorm(y[i],mu[i], sigma))
}
Deviance <- sum(D[])
}"
parameters <-c("beta0", "beta1", "beta2", "sigma","ppo","res","mu","Deviance")
ModelLogN_rep <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 2000,
sample = 5000, thin = 1, n.chains = 2)
mcmc_rep <- as.mcmc.list(ModelLogN_rep)
subset_pred <- grepl("Deviance", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset <- get_values(mcmc_rep,subset_pred)
-2*mean(mcmc_subset)
dic_val <- extract.runjags(ModelLogN_rep, "dic")
dic_val
dic_val
-2*mean(mcmc_subset)
mcmc_subset <- get_values(mcmc_rep,subset_pred)
mcmc_subset_dic<- -2* mcmc_subset
mcmc_subset_dic<- -2* mcmc_subset
var(mcmc_subset_dic)
0.5 *var(mcmc_subset_dic)
mean(mcmc_subset_dic)
dic_val
-2 *mean(mcmc_subset2)
#Testfile BIC
source("helpfunctions.r")
library("runjags")
library("coda")
library("rjags")
set.seed(1341234234)
x <- runif(200,0,10)
y <- x + rnorm(200,0,5)
model.data <- list( y = y, N = length(y), x1 = x)
#DEFINE INTITIAL VALUES
model.inits <- list(list(sigma=2, beta0=1, beta1 = 1),
list(sigma=2, beta0=1, beta1 = 1)
)
#Monitored Variables
parameters <-c("beta0", "beta1", "sigma","Devi","D2evi")
#sigma is variance
model.function <- "model{
for (i in 1:N){
y[i] ~ dnorm(mu[i], tau)
mu[i] <- beta0 + beta1 *x1[i]
D[i] <- - log(tau) + log(2*3.14159265358979) + pow(y[i]-mu[i],2)*tau
D2[i] <- log(dnorm(y[i],mu[i],tau))
}
#priors
Devi <- sum(D[])
D2evi <- sum(D2[])
tau <- 1/sigma
sigma ~ dgamma(0.001, 0.001)
beta0 ~ dnorm(0,0.001)
beta1 ~ dnorm(0,0.001)
}"
runjags.options(method = "rjparallel")
#Set Up Model
#Generate MCMC SAMpls
Model_test <- run.jags(model = model.function,
monitor = parameters, data = model.data,
inits = model.inits, burnin = 2000,
sample = 5000, thin = 1, n.chains = 2)
plot(Model_test)
print(Model_test)
#The DIC Value for model comparison
dic_val <- extract.runjags(Model_test, "dic")
dic_val
mcmc_rep <- as.mcmc.list(Model_test)
subset_pred <- grepl("Devi", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset <- get_values(mcmc_rep,subset_pred)
mean(mcmc_subset)
#works
subset_pred <- grepl("D2evi", dimnames(mcmc_rep[[1]])[[2]])
mcmc_subset2 <- get_values(mcmc_rep,subset_pred)
-2 *mean(mcmc_subset2)
sum(-2*log(dnorm(y,x,5)))
-2 *mean(mcmc_subset2)  -  sum(-2*log(dnorm(y,x,5)))
#The DIC Value for model comparison
dic_val <- extract.runjags(Model_test, "dic")
dic_val
-2 *mean(mcmc_subset2)  -  sum(-2*log(dnorm(y,x,5)))
print(Model_test)
-2 *mean(mcmc_subset2)  -  sum(-2*log(dnorm(y,0.18704+1.007*x,sqrt(26.11))))
dic_val
dic_val
-2 *mean(mcmc_subset2)  -  sum(-2*log(dnorm(y,0.18704+1.007*x,sqrt(26.11))))
-2 *mean(mcmc_subset2)  -
sum(-2*log(dnorm(y,0.18704+1.007*x,sqrt(26.11))))
0.5 * var(mcmc_subset2)
mean(mcmc_subset_dic)
0.5 *var(mcmc_subset_dic)
0.5 * var(mcmc_subset2)
View(ModelLogN_rep)
View(ModelLogN)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(coda)
library(rjags)
library(ggplot2)
library(R2WinBUGS)
library(runjags)
data <- read.csv("..\\data\\Grubs_Nematodes.csv")
data
cens <- matrix(c(time, rep(NA, length(time))), nrow = length(time), ncol = 2)
cens[,1] <- data$LOWERLIM
cens[,2] <- data$UPPERLIM
cens
cens <- matrix(c(time, rep(NA, length(time))), nrow = length(time), ncol = 2)
cens[,1] <- data$LOWERLIM
cens[,2] <- data$UPPERLIM
cens
right_censored <- which(cens[,2] %in% NA)
interval_censored <- 1:nrow(data)
interval_censored <- interval_censored[-right_censored]
data$LOWERLIM
time <- data
time
cens <- matrix(c(time, rep(NA, length(time))), nrow = length(time), ncol = 2)
cens[,1] <- data$LOWERLIM
time <- data$LOWERLIM
cens <- matrix(c(time, rep(NA, length(time))), nrow = length(time), ncol = 2)
cens[,1] <- data$LOWERLIM
cens[,2] <- data$UPPERLIM
cens
right_censored <- which(cens[,2] %in% NA)
interval_censored <- 1:nrow(data)
interval_censored <- interval_censored[-right_censored]
is.censored <- rep(1, length(data$UPPERLIM))
is.censored
time <- rep(NA, length(data$UPPERLIM))
time
model.data <- list(
x = cbind(data$GROUP, data$GRUBSIZE), y = time, right_censored = right_censored,
interval_censored = interval_censored, is.censored = is.censored, cens = cens
)
survival1 <- function(){
# Specification data model
for (i in interval_censored)
{
is.censored[i] ~ dinterval(y[i], cens[i,])
y[i] ~ dlnorm(y.hat[i], tau)
y.hat[i] <- beta0 + beta1*x[i,1]+beta2*x[i,2]
}
for (i in right_censored)
{
is.censored[i] ~ dinterval(y[i], cens[i,1])
y[i] ~ dlnorm(y.hat[i], tau)
y.hat[i] <- beta0 + beta1*x[i,1]+beta2*x[i,2]
}
# Prior specification
beta0 ~ dnorm(0.0, 0.000001)
beta1 ~ dnorm(0.0, 0.000001)
beta2 ~ dnorm(0.0, 0.000001)
tau ~ dgamma(0.001, 0.001)
sigma <- pow(tau, -2)
# sigma ~ dunif(0,100)
}
write.model(survival1, "survival1.txt")
# DEFINE INITIAL VALUES
model.inits <- list(
list(beta0 = 0, beta1 = 0, beta2 = 0, tau = 1 ),
list(beta0 = -0.5, beta1 = -0.5, beta2 = -0.5, tau = 0.5),
list(beta0 = 0.5, beta1 = 0.5, beta2 = 0.5, tau = 1.5)
)
# SET UP MODEL
jags <- jags.model('survival1.txt',
data = model.data,
inits = model.inits,
n.chains = 3)
update(jags, 10000)
# Generate MCMC samples
out_censored <- coda.samples(jags,
c('beta0', 'beta1', 'beta2', 'tau'),
n.iter = 60000, thin=10)
plot(out_censored)
# Posterior distributions
densplot(out)
# Posterior summary statistics
summary(out_censored)
# Generate MCMC samples
out_censored <- coda.samples(jags,
c('beta0', 'beta1', 'beta2', 'tau'),
n.iter = 4000, thin=10)
# SET UP MODEL
jags <- jags.model('survival1.txt',
data = model.data,
inits = model.inits,
n.chains = 3)
update(jags, 1000)
# Generate MCMC samples
out_censored <- coda.samples(jags,
c('beta0', 'beta1', 'beta2', 'tau'),
n.iter = 4000, thin=10)
plot(out_censored)
plot(out_censored)
plot(out_censored)
plot(out_censored)
# Posterior distributions
densplot(out)
plot(out_censored)
# Posterior summary statistics
summary(out_censored)
dic1 <- dic.samples(jags, n.iter=5000, thin=10)
dic1
dic_val
summary(dic_val)
dic_val <- extract.runjags(ModelLogN_rep, "dic")
dic_val
summary(dic_val)
summary(ModelLogN_rep)
