mean(dnorm(2, mean = seq(0,1, by = 0.001) ,sd = 0.25))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.25))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.25))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.5/1.96))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.3))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.28))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.29))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.285))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.289))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.289))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.29))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.295))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.3))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.32))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.26))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.27))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.28))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.284))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.283))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.282))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.283))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.284))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.2833))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.2832))
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.2831))
0.5/0.2831
pnorm(0.5, sd = 0.25)
pnorm(-0.5, sd = 0.25)
pnorm(-0.5, sd = 0.25)*2
pnorm(-0.5, sd = 0.2831)*2
pnorm(-0.5, sd = 0.26)*2
pnorm(-0.5, sd = 0.254)*2
pnorm(-0.5, sd = 0.255)*2
pnorm(-0.5, sd = 0.256)*2
pnorm(-0.5, sd = 0.255)*2
mean(dnorm(0, mean = seq(0,1, by = 0.001) ,sd = 0.25))
mean(dnorm(0, mean = seq(-10,10, by = 0.001) ,sd = 0.25))
mean(dnorm(0, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
mean(dnorm(0, mean = seq(-100,0, by = 0.001) ,sd = 0.25))
sum(dnorm(0, mean = seq(-100,0, by = 0.001) ,sd = 0.25))
sum(dnorm(0, mean = seq(-1000,0, by = 0.001) ,sd = 0.25))
sum(dnorm(0, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
sum(dnorm(0, mean = seq(-1,0, by = 0.001) ,sd = 0.25))
sum(dnorm(0, mean = seq(-0.2,0, by = 0.001) ,sd = 0.25))
sum(dnorm(0, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
sum(dnorm(2, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
sum(dnorm(1, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
sum(dnorm(1, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
sum(dnorm(0, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
plot(z,sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25)))
z <- seq(0,1, by = 0.001)
plot(z,sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25)))
plot(z,sapply(z, p_steck_unten))
p_steck_unten <- function(z){
sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25))
}
plot(z,sapply(z, p_steck_unten))
plot(z,sapply(z, p_steck_unten), type = "l")
p_steck_oben <- function(z){
sum(dnorm(z, mean = seq(1,11, by = 0.001) ,sd = 0.25))
}
plot(z,sapply(z, p_steck_oben), type = "l")
plot(z,sapply(z, p_steck_unten)/p_steck_oben(0), type = "l")
plot(z,sapply(z, p_steck_unten)/(2*p_steck_unten(0)), type = "l")
p_steck_unten <- function(z){
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25)))
}
#die Wahrscheinlichkeit auf Untenstecken für 0 (ist ja ungefähr
# 0.5 da über 4 sd sehr unwahrscheinlich) normalisieren
return(steck_unten_approx(z)/ steck_unten_approx(0))
}
p_steck_unten(0)
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25)))
}
p_steck_unten <- function(z){
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25)))
}
#die Wahrscheinlichkeit auf Untenstecken für 0 (ist ja ungefähr
# 0.5 da über 4 sd sehr unwahrscheinlich) normalisieren
return(steck_unten_approx(z)/ (steck_unten_approx(0)*2))
}
p_steck_unten(0)
p_steck_unten(1)
p_steck_unten(0.3)
p_steck_unten(0.2)
p_steck_unten(0.1)
p_steck_unten <- function(z){
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.0001) ,sd = 0.25)))
}
#die Wahrscheinlichkeit auf Untenstecken für 0 (ist ja ungefähr
# 0.5 da über 4 sd sehr unwahrscheinlich) normalisieren
return(steck_unten_approx(z)/ (steck_unten_approx(0)*2))
}
p_steck_unten(0.1)
p_steck_unten <- function(z){
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.0001) ,sd = 0.1)))
}
#die Wahrscheinlichkeit auf Untenstecken für 0 (ist ja ungefähr
# 0.5 da über 4 sd sehr unwahrscheinlich) normalisieren
return(steck_unten_approx(z)/ (steck_unten_approx(0)*2))
}
p_steck_unten(0.1)
p_steck_unten <- function(z){
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.1)))
}
#die Wahrscheinlichkeit auf Untenstecken für 0 (ist ja ungefähr
# 0.5 da über 4 sd sehr unwahrscheinlich) normalisieren
return(steck_unten_approx(z)/ (steck_unten_approx(0)*2))
}
p_steck_unten(0.1)
p_steck_oben <- function(z){
steck_oben_approx <- function(z){
return(sum(dnorm(z, mean = seq(1,11, by = 0.001) ,sd = 0.25)))
}
return(steck_oben_approx(z)/ (steck_oben_approx(1)*2))
}
#normalisieren auf 0.5
plot(z,sapply(z, p_steck_unten)/(2*p_steck_unten(0)), type = "l")
plot(z,sapply(z, p_steck_oben), type = "l")
#normalisieren auf 0.5
plot(z,sapply(z, p_steck_unten), type = "l")
mean(dnorm(1, mean = seq(0,1, by = 0.001) ,sd = 0.25))
mean(dnorm(1, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
mean(dnorm(1, mean = seq(0,1, by = 0.00001) ,sd = 0.25))
mean(dnorm(0.5, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
mean(dnorm(1, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
mean(dnorm(0, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
mean(dnorm(0, mean = seq(0,1, by = 0.000001) ,sd = 0.25))
mean(dnorm(0, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
mean(dnorm(0, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
mean(dnorm(0.5, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
pnorm(0.5)
pnorm(mean = 0.5, sd = 0.25)
pnorm(0, mean = 0.5, sd = 0.025)
pnorm(0, mean = 0.5, sd = 0.25)
1 - 2 * pnorm(0, mean = 0.5, sd = 0.25)
mean(dnorm(0.5, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
mean(dnorm(0, mean = seq(0,1, by = 0.0001) ,sd = 0.25))
pnorm(0, mean = 4, sd = 4)
pnorm(0, mean = 4, sd = 1)
pnorm(0, mean = 4, sd = 1) + pnorm(4, mean = 4, sd = 1)
plot(z,mean(dnorm(z, mean = seq(0,1, by = 0.0001) ,sd = 0.25)))
plot(z,mean(dnorm(z, mean = seq(0,1, by = 0.0001) ,sd = 0.25)))
#logisches Ergebnis, da ist quasi die Frage, was ist die durchschnitt
#liche dichte der einzelnen Verteilungsfunktionen. Da wir auf 0,1 arbeiten
# mit einer geringen sd. Ist für den mittelsten Wert die durcschnittliche Dichte
# ungefähr 0.95, da symetrische Wahrscheinlichkeit und das dann die FLäche
p_getroffen <- function(z){
return(mean(dnorm(z, mean = seq(0,1, by = 0.0001) ,sd = 0.25)))
}
p_getroffen(0)
p_getroffen(2)
p_getroffen(1)
plot(z,sapply(z, p_getroffen), type = "l")
plot(z,sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten) , type = "l")
#normalisieren auf 0.5
plot(z,sapply(z, p_steck_unten), type = "l")
plot(z,sapply(z, p_steck_oben), type = "l")
plot(z,sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten) , type = "l")
z <- seq(0,1, by = 0.01)
plot(z,sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten) , type = "l")
p_steck_unten(0.4)
p_steck_oben(0.6)
p_steck_unten(0.1)
p_steck_oben(0.9)
p_steck_unten <- function(z){
return(p_steck_oben(1 - z))
}
p_steck_unten(0.1)
p_steck_oben(0.9)
#normalisieren auf 0.5
plot(z,sapply(z, p_steck_unten), type = "l")
plot(z,sapply(z, p_steck_oben), type = "l")
#logisches Ergebnis, da ist quasi die Frage, was ist die durchschnitt
#liche dichte der einzelnen Verteilungsfunktionen. Da wir auf 0,1 arbeiten
# mit einer geringen sd. Ist für den mittelsten Wert die durcschnittliche Dichte
# ungefähr 0.95, da symetrische Wahrscheinlichkeit und das dann die FLäche
p_getroffen <- function(z){
return(mean(dnorm(z, mean = seq(0,1, by = 0.0001) ,sd = 0.25)))
}
plot(z,sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten) , type = "l")
p_steck_unten <- function(z){
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25)))
}
return(steck_unten_approx(z)/ (steck_unten_approx(0)*2))
}
p_steck_oben <- function(z){
return(p_steck_unten(1 - z))
}
p_steck_unten(0.1)
p_steck_oben(0.9)
#normalisieren auf 0.5
plot(z,sapply(z, p_steck_unten), type = "l")
plot(z,sapply(z, p_steck_oben), type = "l")
#logisches Ergebnis, da ist quasi die Frage, was ist die durchschnitt
#liche dichte der einzelnen Verteilungsfunktionen. Da wir auf 0,1 arbeiten
# mit einer geringen sd. Ist für den mittelsten Wert die durcschnittliche Dichte
# ungefähr 0.95, da symetrische Wahrscheinlichkeit und das dann die FLäche
p_getroffen <- function(z){
return(mean(dnorm(z, mean = seq(0,1, by = 0.0001) ,sd = 0.25)))
}
plot(z,sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten) , type = "l")
a <-  p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten)
a <-  sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten)
a
source('C:/Valentin/Goettingen/3_Semester/Baysian_2/Metropolis.R', encoding = 'UTF-8')
a
# #die Wahrscheinlichkeit auf Untenstecken für 0 (ist ja ungefähr
# # 0.5 da über 4 sd sehr unwahrscheinlich) normalisieren
p_steck_oben <- function(z){
steck_oben_approx <- function(z){
return(sum(dnorm(z, mean = seq(1,11, by = 0.001) ,sd = 0.25)))
}
return(steck_oben_approx(z)/ (steck_oben_approx(1)*2))
}
a <-  sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten)
a
plot(z,sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten) , type = "l")
p_steck_unten(0.1)
p_steck_oben(0.9)
p_steck_unten <- function(z){
steck_unten_approx <- function(z){
return(sum(dnorm(z, mean = seq(-10,0, by = 0.001) ,sd = 0.25)))
}
return(steck_unten_approx(z)/ (steck_unten_approx(0)*2))
}
# #die Wahrscheinlichkeit auf Untenstecken für 0 (ist ja ungefähr
# # 0.5 da über 4 sd sehr unwahrscheinlich) normalisieren
p_steck_oben <- function(z){
steck_oben_approx <- function(z){
return(sum(dnorm(z, mean = seq(1,11, by = 0.001) ,sd = 0.25)))
}
return(steck_oben_approx(z)/ (steck_oben_approx(1)*2))
}
p_steck_unten(0.1)
p_steck_oben(0.9)
#normalisieren auf 0.5
plot(z,sapply(z, p_steck_unten), type = "l")
plot(z,sapply(z, p_steck_oben), type = "l")
#logisches Ergebnis, da ist quasi die Frage, was ist die durchschnitt
#liche dichte der einzelnen Verteilungsfunktionen. Da wir auf 0,1 arbeiten
# mit einer geringen sd. Ist für den mittelsten Wert die durcschnittliche Dichte
# ungefähr 0.95, da symetrische Wahrscheinlichkeit und das dann die FLäche
p_getroffen <- function(z){
return(mean(dnorm(z, mean = seq(0,1, by = 0.0001) ,sd = 0.25)))
}
plot(z,sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten) , type = "l")
a <-  sapply(z, p_getroffen) + sapply(z, p_steck_oben) + sapply(z, p_steck_unten)
a
.libpaths()
install.packages("repr")
# cor(data_wide_model2[,7:18], use = "pairwise.complete.obs") %>%  round(3)
# cov(data[,1:12], use = "pairwise.complete.obs") %>%  round(1)
pchisq(52979-49017,3147-155)
# cor(data_wide_model2[,7:18], use = "pairwise.complete.obs") %>%  round(3)
# cov(data[,1:12], use = "pairwise.complete.obs") %>%  round(1)
pchisq(52979-41017,3147-155)
# cor(data_wide_model2[,7:18], use = "pairwise.complete.obs") %>%  round(3)
# cov(data[,1:12], use = "pairwise.complete.obs") %>%  round(1)
pchisq(52979-51017,3147-155)
# cor(data_wide_model2[,7:18], use = "pairwise.complete.obs") %>%  round(3)
# cov(data[,1:12], use = "pairwise.complete.obs") %>%  round(1)
pchisq(52979-49017,3147-155)
# cor(data_wide_model2[,7:18], use = "pairwise.complete.obs") %>%  round(3)
# cov(data[,1:12], use = "pairwise.complete.obs") %>%  round(1)
pchisq(52979-51017,3147-155)
# cor(data_wide_model2[,7:18], use = "pairwise.complete.obs") %>%  round(3)
# cov(data[,1:12], use = "pairwise.complete.obs") %>%  round(1)
pchisq(52979-49017,52979-49017)
52979-49017
data_long$year0.5 <- ifelse(data_long$years_after == 0.5, 1,0)
library(lme4)
y <- rnorm(100)
y <- rnorm(1000)
y_cen <- ifelse(y > 1,1,y)
hist(y_cen)
hist(y_cen,breaks = 20)
mean(y_cen)
sd(y_cen)
y_cen <- ifelse(y > 0.5,0.5,y)
hist(y_cen,breaks = 20)
mean(y_cen)
sd(y_cen)
pnorm(0.5)
pnorm(0.99)
pnorm(0.5,lower.tail = T)
pnorm(0.5,lower.tail = F)
pnorm(0.5,meann_cen,sd_cen,lower.tail = F)
meann_cen <- mean(y_cen)
sd_cen <- sd(y_cen)
pnorm(0.5,meann_cen,sd_cen,lower.tail = F)
data_sim <- rnorm(100000,meann_cen,sd_cen)
new_est_y <- mean(data_sim[data_sim > 0.5])
new_est_y
new_est_y
for (i in 1:100){
meann_cen <- mean(y_cen)
sd_cen <- sd(y_cen)
data_sim <- rnorm(100000,meann_cen,sd_cen)
new_est_y <- mean(data_sim[data_sim > 0.5])
y_cen <- ifelse(y == 0.5,new_est_y,y)
}
y_cen
mean(y_cen)
sd(y_cen)
for (i in 1:100){
meann_cen <- mean(y_cen)
sd_cen <- sd(y_cen)
data_sim <- rnorm(100000,meann_cen,sd_cen)
new_est_y <- mean(data_sim[data_sim > 0.5])
y_cen <- ifelse(y == 0.5,new_est_y,y)
}
sd(y_cen)
for (i in 1:100){
meann_cen <- mean(y_cen)
sd_cen <- sd(y_cen)
data_sim <- rnorm(100000,meann_cen,sd_cen)
new_est_y <- mean(data_sim[data_sim > 0.5])
y_cen <- ifelse(y == 0.5,new_est_y,y)
}
sd(y_cen)
mean(y_cen)
for (i in 1:1000){
meann_cen <- mean(y_cen)
sd_cen <- sd(y_cen)
data_sim <- rnorm(100000,meann_cen,sd_cen)
new_est_y <- mean(data_sim[data_sim > 0.5])
y_cen <- ifelse(y == 0.5,new_est_y,y)
}
mean(y_cen)
sd(y_cen)
new_est_y
y <- rnorm(1000)
y_cen <- ifelse(y > 0.5,0.5,y)
n <- sum(y_cen == 0.5)
y <- rnorm(1000)
y_cen <- ifelse(y > 0.5,0.5,y)
n <- sum(y_cen == 0.5)
y <- rnorm(1000)
y_cen <- ifelse(y > 0.5,0.5,y)
n <- sum(y_cen == 0.5)
for (i in 1:10){
meann_cen <- mean(y_cen)
sd_cen <- sd(y_cen)
data_sim <- rnorm(100000,meann_cen,sd_cen)
new_est_y <- data_sim[data_sim > 0.5]
new_est_y <- new_est_y[1:n]
y_cen <- ifelse(y >= 0.5,new_est_y,y)
}
sd(y_cen)
mean(y_cen)
for (i in 1:100){
meann_cen <- mean(y_cen)
sd_cen <- sd(y_cen)
data_sim <- rnorm(100000,meann_cen,sd_cen)
new_est_y <- data_sim[data_sim > 0.5]
new_est_y <- new_est_y[1:n]
y_cen <- ifelse(y >= 0.5,new_est_y,y)
}
sd(y_cen)
mean(y_cen)
for (i in 1:100){
meann_cen <- mean(y_cen)
sd_cen <- sd(y_cen)
data_sim <- rnorm(100000,meann_cen,sd_cen)
new_est_y <- data_sim[data_sim > 0.5]
new_est_y <- new_est_y[1:n]
y_cen <- ifelse(y >= 0.5,new_est_y,y)
}
sd(y_cen)
mean(y_cen)
for (i in 1:1000){
meann_cen <- mean(y_cen)
sd_cen <- sd(y_cen)
data_sim <- rnorm(100000,meann_cen,sd_cen)
new_est_y <- data_sim[data_sim > 0.5]
new_est_y <- new_est_y[1:n]
y_cen <- ifelse(y >= 0.5,new_est_y,y)
}
sd(y_cen)
mean(y_cen)
hist(y_cen)
hist(y_cen, breaks = 100)
mean(y)
sd(y)
y <- rnorm(1000)
mean(y)
sd(y)
y <- rnorm(1000)
y <- rnorm(10000)
mean(y)
sd(y)
y_cen <- ifelse(y > 0.5,0.5,y)
n <- sum(y_cen == 0.5)
for (i in 1:10){
meann_cen <- mean(y_cen)
sd_cen <- sd(y_cen)
data_sim <- rnorm(100000,meann_cen,sd_cen)
new_est_y <- data_sim[data_sim > 0.5]
new_est_y <- new_est_y[1:n]
y_cen <- ifelse(y >= 0.5,new_est_y,y)
}
sd(y_cen)
mean(y_cen)
for (i in 1:100){
meann_cen <- mean(y_cen)
sd_cen <- sd(y_cen)
data_sim <- rnorm(100000,meann_cen,sd_cen)
new_est_y <- data_sim[data_sim > 0.5]
new_est_y <- new_est_y[1:n]
y_cen <- ifelse(y >= 0.5,new_est_y,y)
}
mean(y_cen)
sd(y_cen)
mean(y)
sd(y)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
set.seed(12434212)
#a = k and b = 1/lambda of the exponential
#Survival Model for Weibull distributed data
n <- 10000
#mean survival = 1/lambda
beta <- c(5)
x <- cbind(rnorm(n,0,1))
invlambda <- exp(beta*x)
k <- 2
time <- rweibull(n,k,invlambda)
data <- data.frame(time = time, x1 = x)
#now I constructed a data set and now estimate beta1-3
loglik_exp <- function(beta){
#which is the best beta that leads to the best lambdas.
-sum(dweibull(data$time,k,exp(beta*data$x1), log = T))
}
optim(c(6),loglik_exp,method = "Brent",lower = -10,upper = 100)
-loglik_exp(beta)
#First Bayes test:
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
library(coda)
library(R2OpenBUGS)
Grub <- read.csv("..\\data\\Grubs_Nematodes.csv")
NAs <- is.na(Grub$UPPERLIM)
Grub$UPPERLIM[NAs]<- 12
Grub$value <- (Grub$UPPERLIM + Grub$LOWERLIM) /2
Grub$UPPERLIM[NAs]<- NA
rm(NAs)
colnames(Grub) <- c("group", "id", "grubsize", "lowerlim", "upperlim", "value")
#wenn ich das als Faktor definere rafft das WIbugs nicht mehr
#Grub$group <- as.factor(Grub$group)
Grub$group <- Grub$group-1
#https://www.youtube.com/watch?v=_44_RXTWpRw
#lognormal with value
N <- nrow(Grub)
y <- log(Grub$value)
x1 <- Grub$grubsize
x2 <- Grub$group
data <- list ("N", "y", "x1", "x2")
inits <- function(){list(beta0 = 0, beta1 = 0, beta2 = 0, sigma = 3)
}
getwd()
# setwd(".\\..\\R_code")
# Grub_sim <- bugs(data, inits, model.file = "Bayes1.txt",codaPkg=T,
#                     parameters = c("beta0", "beta1","beta2","sigma"),
#                     n.chains = 3,n.burnin = 0, n.iter = 10000, n.thin = 10)#, debug=TRUE)
# # setwd("..")
# typeof(Grub_sim)
# Grub_sim_coda <- read.bugs(Grub_sim)
# typeof(Grub_sim_coda)
# pdf("Test1.pdf")
# geweke.plot(Grub_sim_coda, frac1=0.1, frac2=0.5)
# dev.off()
#how many obs per id
Nsubj <- as.vector(table(Grub$id))
CumSum <- cumsum(Nsubj) - 7
N <- length(CumSum)
y <- log(Grub$value)
x1 <- Grub$grubsize
x2 <- Grub$group
z1 <- Grub$id
data2 <- list ("N","Nsubj","CumSum", "y", "x1", "x2", "z1")
subv <- rep(0.1,times = 20)
inits2 <- function(){list(beta0.sub = 0, beta1.sub = 0,
beta2.sub = 0,sigma.sub = 0.001,
b0.grp = subv, sigma_b0.grp=subv)
}
bugs.data(data2, dir=getwd(),digits=5,data.file="data.txt")
#beta0 = Intercept , beta1 = Grubsize, beta2 = Grub Group, b0 random intercept
#per individuum
setwd(".\\R_code")
Grub_sim_random <- bugs(data2, inits2, model.file = "lognormal_try1.txt",
codaPkg=T,parameters = c("beta0.sub", "beta1.sub",
"beta2.sub","sigma.sub",
"b0.grp","sigma_b0.grp"),
n.chains = 1,n.burnin = 5000, n.iter = 10000, n.thin = 1, debug=T)
setwd("..")
typeof(Grub_sim_random)
Grub_sim_coda <- read.bugs(Grub_sim_random)
typeof(Grub_sim_coda)
# pdf("Test1.pdf")
# geweke.plot(Grub_sim_coda, frac1=0.1, frac2=0.5)
# dev.off()
summary(Grub_sim_coda)
exp(0.4)
install.packages("survival")
library(survival)
